buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://repo.jfrog.org/artifactory/gradle-plugins'
        }
        maven {
            name 'Gradle Shadow'
            url 'http://dl.bintray.com/content/johnrengelman/gradle-plugins'
        }
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:1.1.0"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.0.16'
        classpath 'org.gradle.plugins:shadow:0.7.4'
    }
}

apply plugin: 'cobertura'
apply plugin: 'codenarc'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'shadow'
apply plugin: 'idea'

version=currentVersion
group=currentGroup

// Run code narc before the test phase begins
test.dependsOn codenarcMain

repositories {
    mavenLocal()
    mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    maven {
            name 'bintray'
            url 'http://dl.bintray.com/kyleboon/swagger-jaxrs-groovydoclet'
    }
    
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:${groovyVersion}"

    compile "com.yammer.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-testing:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-hibernate:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-migrations:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-auth:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-client:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-views:${dropwizardVersion}"

    compile 'com.h2database:h2:1.3.170'

    compile "com.bloomhealthco:swagger-jaxrs-groovydoclet:0.2.0"

    testCompile "com.yammer.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.0-SNAPSHOT"
    testRuntime "cglib:cglib-nodep:2.2.2"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:1.2"    // allows mocking of classes without default constructor (together with CGLIB)

    // needed for validation tests so logging in hibernate validator does not throw exception
    compile 'ch.qos.logback:logback-classic:1.0.7'
    compile "org.slf4j:log4j-over-slf4j:1.7.2"

    
    compile files("${System.properties['java.home']}/../lib/tools.jar")
}

jar {
    manifest {
        attributes 'Main-Class': "${mainClass}"
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
    }
}

cobertura {
    coverageFormats = ['xml', 'html']
    coverageIncludes = ['**/*.java', '**/*.groovy']
    coverageSourceDirs = [sourceSets.main.allSource.srcDirs]
}

codenarc {
    configFile = rootProject.file('codenarcrule.groovy')
    reportFormat = System.properties['codeNarcOutput'] ?: 'html'
}

task swagger(description:'Builds the JSON artifacts Swagger needs to operate upon.') {
    inputs.dir file('src/main/groovy')
    outputs.dir file('build/classes/main/apidocs')
    doLast {
        ant.taskdef(name: "docca", classname: "org.codehaus.groovy.enhancedgroovydoc.DocletGroovyDoc",
                classpath: configurations.compile.asPath)
        ant.docca(
                destdir: "build/classes/main/apidocs",
                sourcepath:"src/main/groovy",
                packagenames:"**.*",
                use:"true",
                windowtitle:"Swagger",
                doctitle:"Swagger",
                header:"Swagger",
                footer:"Swagger",
                private:"false",
                {
                    doclet(name:"com.bloomhealthco.apidocs.ServiceDoclet"){
                        param(name:"-d", value:"${sourceSets.main.output.classesDir}/apidocs")
                        param(name:"-apiVersion", value:"1")
                        // Localhost and 8888 will be replaced with current server:port in javascript
                        param(name:"-docBasePath", value:"http://localhost:8888/apidocs")
                        param(name:"-apiBasePath", value:"http://localhost:8888")
                    }
                }
        )
    }
}

shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

project.tasks.jar.dependsOn swagger
//Make the shadow task dependent on the copySignedLibs so they are always available
project.tasks.shadow.dependsOn copySignedLibs
project.tasks.shadow.doLast {
    ant.checksum file: it.outputJar
}


task run(dependsOn: 'shadow', group: 'dropwizard',  description: "Run service using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith('dw') }
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'server', 'dev_config.yml']
        systemProperties = props
    }
}

task migrate(dependsOn: 'shadow', group: 'dropwizard', description: "Run migrations using the dev configuration") << {
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'db', 'migrate', 'dev_config.yml']
    }
}

task dropAll(dependsOn: 'shadow', group: 'dropwizard',  description: "Run drop-all database command") << {
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'db', 'drop-all', 'dev_config.yml', '--confirm-delete-everything']
    }
}
